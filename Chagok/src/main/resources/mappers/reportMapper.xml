<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.chagok.mapper.reportMapper">
  
  	<!-- Test -->
  	<select id="rptTest" resultType="AbookVO">
  		select * from account_book
  		where mno=#{mno}
  	</select>

	<!-- 회원번호, inout=1, 이번달 -->
	<sql id="wh1out">
		where ab.mno=#{mno} 
		and ab.ab_inout=1 
		and ab.ab_date between last_day(now() - interval 1 month) + interval 1 day 
			and last_day(now())
	</sql>
	
	<!-- 회원번호, inout=2, 이번달 -->
	<sql id="wh1in">
		where ab.mno=#{mno} 
		and ab.ab_inout=2 
		and ab.ab_date between last_day(now() - interval 1 month) + interval 1 day 
			and last_day(now())
	</sql>

	<!-- 회원번호, inout=1, 저번달 -->
	<sql id="wh2out">
		where ab.mno=#{mno} 
		and ab.ab_inout=1 
		and ab.ab_date between last_day(now() - interval 2 month) + interval 1 day 
			and last_day(now() - interval 1 month) + interval 1 day
	</sql>
	
	<!-- 총 지출 -->
	<sql id="absum">
		select sum(ab.ab_amount) dtSum
		from account_book ab
	</sql>
	
	<!-- 평균 지출 -->
	<sql id="abavg">
		select round(avg(ab.ab_amount), 0) dtSum
		from account_book ab
	</sql>
	
	<!-- 누적 지출 -->
	<sql id="cumsum">
		(select date_format(ab_date, '%Y-%m-%d') date, sum(ab_amount) sum
		from account_book
		where mno=#{mno} 
		and ab_inout=1 
		and ab_date between LAST_DAY(NOW() - interval 1 month) + interval 1 DAY and LAST_DAY(NOW())
		group by date)
	</sql>
	
	<!-- 주간 통계 -->
	<sql id="week2">
	select
	concat(
		date_format(
			date_add(ab.ab_date, interval (weekday(ab.ab_date)) * -1 day),
			'%Y-%m-%d'
		),
		' ~ ',
		date_format(
			date_add(ab.ab_date, interval (6 - weekday(ab.ab_date)) * +1 day),
			'%Y-%m-%d'
		)
	) as week2
	</sql>
	
	<sql id="weekout">
		sum(ab.ab_amount) as 'weekout'
		from account_book ab
		where ab.mno=#{mno}
		group by week2, ab.ab_inout 
		having ab.ab_inout=1
		) A
	</sql>
	
	<sql id="weekin">
		sum(ab.ab_amount) as 'weekin'
		from account_book ab
		where ab.mno=#{mno}
		group by week2, ab.ab_inout
		having ab.ab_inout=2
		) B
	</sql>
	
	<!-- 월간 통계 -->
	<sql id="monthout">
		select date_format(ab.ab_date, '%Y년 %m월') month2, sum(ab.ab_amount) as 'monthout'
		from account_book ab
		where ab.mno=1
		group by month2, ab.ab_inout 
		having ab.ab_inout=1
		) A 	
	</sql>
	
	<sql id="monthin">
		select date_format(ab.ab_date, '%Y년 %m월') month2, sum(ab.ab_amount) as 'monthin'
		from account_book ab
		where ab.mno=1
		group by month2, ab.ab_inout
		having ab.ab_inout=2
		) B
	</sql>
	
	<!-- ct_top, ct_bottom -->
	<sql id="joinct">
		from account_book ab 
		inner join category ct
		on ct.ctno=ab.ctno
	</sql>
	
  	<!-- //////////////////////// dateReport //////////////////////// -->
  	<!-- 1. 이번달 총 지출  -->
  	<select id="dtSum1" resultType="Integer">
  		<include refid="absum"/>
  		<include refid="wh1out"/>
  	</select>
  	
  	<!-- 2. 지난달 총 지출  -->
  	<select id="dtSum2" resultType="Integer">
		<include refid="absum"/>
		<include refid="wh2out"/>
	</select>
  		
  	<!-- 3. 이번달 평균 지출  -->
  	<select id="dtAvg1" resultType="Integer">
  		<include refid="abavg"/>
  		<include refid="wh1out"/>
  	</select>
  	
  	<!-- 4. 지난달 평균 지출  -->
  	<select id="dtAvg2" resultType="Integer">
		<include refid="abavg"/>
		<include refid="wh2out"/>
	</select>
  
  	<!-- 5. 이번달 예상 지출 -->
   	<select id="expSum" resultType="Integer">
		select
		round(avg(ab.ab_amount), 0) 
			* (datediff(last_day(now()), date_format(now(), '%Y-%m-%d'))
		) expSum
		from account_book ab
		<include refid="wh1out"/>
	</select> 	
	
	<!-- 6. 월간 수입 -->
	<select id="dtSumIn" resultType="Integer">
  		<include refid="absum"/>
  		<include refid="wh1in"/>
	</select>
	
	<!-- 7. 이번달 무지출 일수 -->
	<select id="noOut" resultType="Integer">
		select 
		(select datediff(LAST_DAY(NOW()), last_day(now() - interval 1 month) + interval 1 day)+1) 
			- (select count(c.date) as cnt 
				from (
					select date_format(ab.ab_date, '%Y-%m-%d') date
					from account_book ab
					<include refid="wh1out"/>
					group by date)
				as c);
	</select>
	
	<!-- 8. 이번달 결제 건수(지출 횟수) -->
	<select id="outCnt" resultType="Integer">
		select count(ab.abno)
		from account_book ab
		<include refid="wh1out"/>
	</select>
	
	<!-- 9. 이번달 누적 지출 -->
	<select id="outCum" resultType="map">
		select t2.date t2date, (select sum(t1.sum) 
			from <include refid="cumsum"/> as t1
				where t1.date<![CDATA[<=]]> t2.date) as cumSum
		from <include refid="cumsum"/> as t2;
	</select>
	
	<!-- 10. 일간 통계 (지출) -->
	<select id="day" resultType="map">
		select date_format(ab.ab_date, '%Y-%m-%d') day2, sum(ab.ab_amount) dayout
		from account_book ab
		<include refid="wh1out"/>
		group by day2;
	</select>
	
	<!-- 11. 주간 통계 (지출, 수입) -->
	<select id="week" resultType="map">
		select A.week2, A.weekout, b.weekin
			from (
			<include refid="week2"/>
			, <include refid="weekout"/>
				left outer join (
					<include refid="week2"/>
					, <include refid="weekin"/>
				on A.week2 = B.week2
		union
			select B.week2, A.weekout, b.weekin
			from (
			<include refid="week2"/>
			, <include refid="weekout"/>
				right outer join (
					<include refid="week2"/>
					, <include refid="weekin"/>
				on A.week2 = B.week2
		order by week2 desc limit 4;
	</select>	
	
	<!-- 12. 월간 통계 (지출, 수입) -->
	<select id="month" resultType="map">
		select A.month2, A.monthout, b.monthin
			from (
				<include refid="monthout"/> 
					left outer join (
						<include refid="monthin"/> 
					on A.month2 = B.month2
		union
			select B.month2, A.monthout, b.monthin
			from (
				<include refid="monthout"/> 
					right outer join (
						<include refid="monthin"/> 
					on A.month2 = B.month2
			order by month2 desc limit 4;	
	</select>
	
	<!-- 지출액 TOP 4 -->
	<select id="amtTop" resultType="map">
		select ct.ct_top top1, ct.ct_bottom bottom1, ab.ab_amount amt, ab_content content
		<include refid="joinct"/>
		<include refid="wh1out"/>
		order by amt desc limit 4;
	</select>
	
	<!-- 지출횟수 TOP 4 -->
	<select id="cntTop" resultType="map">
		select ct.ct_top top2, ct.ct_bottom bottom2, count(ab.ctno) cnt
		<include refid="joinct"/>
		<include refid="wh1out"/>
		group by ab.ctno
		order by cnt desc limit 4;
	</select>
	
  	<!-- //////////////////////// cateReport //////////////////////// -->
  	<!-- 1.최다 지출 카테고리 -->
	<select id="cateCnt" resultType="map">
		select count(ab.abno) cateCnt, ct.ct_top cateName1
		from account_book ab 
		inner join category ct on ab.ctno=ct.ctno 
		<include refid="wh1out"/>
		group by cateName1
		order by cateCnt desc;
	</select>	
	
  	<!-- 2.최대 지출 카테고리 -->
	<select id="cateSum" resultType="map">
		select sum(ab.ab_amount) cateSum, ct.ct_top cateName2
		from account_book ab 
		inner join category ct on ab.ctno=ct.ctno 
		<include refid="wh1out"/>
		group by cateName2
		order by cateSum desc;
	</select>
	
	<!-- 3.챌린지 추천 -->
	<select id="chRand" resultType="ChallengeVO">
		select *
		from challenge ch
		where ch.ctno in (
			select ct.ctno from category ct
			where ct.ct_top in (
				select * from (
					select ct.ct_top
					from account_book ab inner join category ct on ab.ctno=ct.ctno
					<include refid="wh1out"/>
					group by ct.ct_top
					order by sum(ab.ab_amount) desc limit 4
				) as tmp
			)
		)
		order by rand() limit 4;
	</select>
	
	<!-- 4.카드 추천 -->
	
  </mapper>